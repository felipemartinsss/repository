
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Feb 04 23:57:49 EST 2011
//----------------------------------------------------

package rddl.parser;

import rddl.RDDL;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Fri Feb 04 23:57:49 EST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\010\000\002\010\010\000" +
    "\002\010\007\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\011\007\000\002\013\003\000" +
    "\002\013\004\000\002\017\006\000\002\017\010\000\002" +
    "\034\003\000\002\034\005\000\002\012\003\000\002\012" +
    "\005\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\040\003\000\002\040\004\000\002" +
    "\040\003\000\002\040\003\000\002\037\003\000\002\037" +
    "\004\000\002\037\003\000\002\037\003\000\002\014\003" +
    "\000\002\014\006\000\002\015\003\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\020\007\000\002\021\003\000\002\021" +
    "\004\000\002\022\016\000\002\022\016\000\002\022\016" +
    "\000\002\022\012\000\002\022\016\000\002\023\007\000" +
    "\002\041\003\000\002\041\003\000\002\024\003\000\002" +
    "\024\004\000\002\025\006\000\002\026\006\000\002\027" +
    "\007\000\002\030\003\000\002\030\004\000\002\031\004" +
    "\000\002\006\044\000\002\006\040\000\002\006\037\000" +
    "\002\006\033\000\002\006\037\000\002\006\033\000\002" +
    "\006\032\000\002\006\026\000\002\007\024\000\002\007" +
    "\015\000\002\032\003\000\002\032\004\000\002\033\010" +
    "\000\002\045\003\000\002\045\004\000\002\046\007\000" +
    "\002\046\004\000\002\046\010\000\002\046\005\000\002" +
    "\046\011\000\002\046\006\000\002\047\003\000\002\047" +
    "\005\000\002\047\003\000\002\047\005\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\042\006\000\002\042\003\000\002\050\003\000\002" +
    "\050\005\000\002\052\003\000\002\052\005\000\002\053" +
    "\005\000\002\054\005\000\002\054\007\000\002\055\003" +
    "\000\002\055\005\000\002\056\006\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\004\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\010\000\002\044\010\000\002\044" +
    "\006\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\005\000\002\043\005\000" +
    "\002\043\004\000\002\043\004\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\010\000\002\043\010\000\002\043\012\000\002\043\011" +
    "\000\002\043\006\000\002\043\006\000\002\043\010\000" +
    "\002\043\010\000\002\043\006\000\002\043\010\000\002" +
    "\043\006\000\002\043\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\010\005\007\006\011\040\005\001\002\000" +
    "\012\002\ufffd\005\007\006\011\040\005\001\002\000\004" +
    "\136\u01fe\001\002\000\012\002\ufffb\005\007\006\011\040" +
    "\005\001\002\000\004\136\321\001\002\000\004\002\320" +
    "\001\002\000\004\136\014\001\002\000\012\002\ufffc\005" +
    "\007\006\011\040\005\001\002\000\004\002\uffff\001\002" +
    "\000\004\017\015\001\002\000\004\005\016\001\002\000" +
    "\004\124\017\001\002\000\004\136\020\001\002\000\004" +
    "\103\021\001\002\000\012\011\023\012\025\032\022\040" +
    "\024\001\002\000\004\124\304\001\002\000\004\017\241" +
    "\001\002\000\004\124\123\001\002\000\004\017\026\001" +
    "\002\000\006\061\027\136\031\001\002\000\004\136\115" +
    "\001\002\000\012\020\uffad\061\027\103\uffad\136\031\001" +
    "\002\000\010\103\057\105\061\124\060\001\002\000\004" +
    "\020\033\001\002\000\004\103\034\001\002\000\004\032" +
    "\035\001\002\000\004\124\036\001\002\000\012\026\043" +
    "\027\040\076\041\134\037\001\002\000\006\020\uffd9\103" +
    "\uffd9\001\002\000\004\103\uffd7\001\002\000\004\134\056" +
    "\001\002\000\004\103\044\001\002\000\004\103\uffd6\001" +
    "\002\000\004\007\045\001\002\000\004\124\046\001\002" +
    "\000\004\134\047\001\002\000\004\103\050\001\002\000" +
    "\004\010\051\001\002\000\004\124\052\001\002\000\004" +
    "\135\053\001\002\000\004\103\054\001\002\000\004\020" +
    "\055\001\002\000\012\002\uffb7\005\uffb7\006\uffb7\040\uffb7" +
    "\001\002\000\006\020\uffd8\103\uffd8\001\002\000\012\020" +
    "\uffaa\061\uffaa\103\uffaa\136\uffaa\001\002\000\024\026\076" +
    "\027\104\076\074\127\103\130\106\134\037\135\105\136" +
    "\075\150\100\001\002\000\006\136\063\150\064\001\002" +
    "\000\004\106\071\001\002\000\010\020\uffa5\106\uffa5\110" +
    "\067\001\002\000\010\020\uffa3\106\uffa3\110\065\001\002" +
    "\000\006\136\063\150\064\001\002\000\006\020\uffa2\106" +
    "\uffa2\001\002\000\006\136\063\150\064\001\002\000\006" +
    "\020\uffa4\106\uffa4\001\002\000\006\103\072\124\073\001" +
    "\002\000\012\020\uffab\061\uffab\103\uffab\136\uffab\001\002" +
    "\000\024\026\076\027\104\076\074\127\103\130\106\134" +
    "\037\135\105\136\075\150\100\001\002\000\006\134\056" +
    "\135\111\001\002\000\006\020\uffe1\103\uffe1\001\002\000" +
    "\006\020\uffda\103\uffda\001\002\000\006\020\uffe2\103\uffe2" +
    "\001\002\000\006\020\uffe0\103\uffe0\001\002\000\006\020" +
    "\uffe3\103\uffe3\001\002\000\004\103\110\001\002\000\006" +
    "\020\uffdf\103\uffdf\001\002\000\006\020\uffdb\103\uffdb\001" +
    "\002\000\006\020\uffdd\103\uffdd\001\002\000\006\020\uffde" +
    "\103\uffde\001\002\000\006\020\uffe4\103\uffe4\001\002\000" +
    "\012\020\uffa7\061\uffa7\103\uffa7\136\uffa7\001\002\000\006" +
    "\020\uffdc\103\uffdc\001\002\000\004\103\113\001\002\000" +
    "\012\020\uffa6\061\uffa6\103\uffa6\136\uffa6\001\002\000\006" +
    "\020\uffac\103\uffac\001\002\000\006\103\116\105\117\001" +
    "\002\000\012\020\uffa8\061\uffa8\103\uffa8\136\uffa8\001\002" +
    "\000\006\136\063\150\064\001\002\000\004\106\121\001" +
    "\002\000\004\103\122\001\002\000\012\020\uffa9\061\uffa9" +
    "\103\uffa9\136\uffa9\001\002\000\004\136\124\001\002\000" +
    "\004\103\125\001\002\000\010\011\127\012\130\032\126" +
    "\001\002\000\004\124\225\001\002\000\004\017\152\001" +
    "\002\000\004\017\131\001\002\000\006\061\027\136\031" +
    "\001\002\000\004\020\133\001\002\000\004\103\134\001" +
    "\002\000\004\032\135\001\002\000\004\124\136\001\002" +
    "\000\012\026\043\027\040\076\041\134\037\001\002\000" +
    "\004\103\140\001\002\000\004\007\141\001\002\000\004" +
    "\124\142\001\002\000\004\134\143\001\002\000\004\103" +
    "\144\001\002\000\004\010\145\001\002\000\004\124\146" +
    "\001\002\000\004\135\147\001\002\000\004\103\150\001" +
    "\002\000\004\020\151\001\002\000\012\002\uffb8\005\uffb8" +
    "\006\uffb8\040\uffb8\001\002\000\004\136\155\001\002\000" +
    "\006\020\uffb0\136\155\001\002\000\004\020\163\001\002" +
    "\000\004\113\156\001\002\000\004\017\157\001\002\000" +
    "\006\136\063\150\064\001\002\000\004\020\161\001\002" +
    "\000\004\103\162\001\002\000\006\020\uffae\136\uffae\001" +
    "\002\000\004\103\164\001\002\000\006\012\166\032\165" +
    "\001\002\000\004\124\210\001\002\000\004\017\167\001" +
    "\002\000\006\061\027\136\031\001\002\000\004\020\171" +
    "\001\002\000\004\103\172\001\002\000\004\032\173\001" +
    "\002\000\004\124\174\001\002\000\012\026\043\027\040" +
    "\076\041\134\037\001\002\000\004\103\176\001\002\000" +
    "\004\007\177\001\002\000\004\124\200\001\002\000\004" +
    "\134\201\001\002\000\004\103\202\001\002\000\004\010" +
    "\203\001\002\000\004\124\204\001\002\000\004\135\205" +
    "\001\002\000\004\103\206\001\002\000\004\020\207\001" +
    "\002\000\012\002\uffba\005\uffba\006\uffba\040\uffba\001\002" +
    "\000\012\026\043\027\040\076\041\134\037\001\002\000" +
    "\004\103\212\001\002\000\004\007\213\001\002\000\004" +
    "\124\214\001\002\000\004\134\215\001\002\000\004\103" +
    "\216\001\002\000\004\010\217\001\002\000\004\124\220" +
    "\001\002\000\004\135\221\001\002\000\004\103\222\001" +
    "\002\000\004\020\223\001\002\000\012\002\uffb6\005\uffb6" +
    "\006\uffb6\040\uffb6\001\002\000\004\020\uffaf\001\002\000" +
    "\012\026\043\027\040\076\041\134\037\001\002\000\004" +
    "\103\227\001\002\000\004\007\230\001\002\000\004\124" +
    "\231\001\002\000\004\134\232\001\002\000\004\103\233" +
    "\001\002\000\004\010\234\001\002\000\004\124\235\001" +
    "\002\000\004\135\236\001\002\000\004\103\237\001\002" +
    "\000\004\020\240\001\002\000\012\002\uffb4\005\uffb4\006" +
    "\uffb4\040\uffb4\001\002\000\004\136\155\001\002\000\004" +
    "\020\243\001\002\000\004\103\244\001\002\000\006\012" +
    "\246\032\245\001\002\000\004\124\270\001\002\000\004" +
    "\017\247\001\002\000\006\061\027\136\031\001\002\000" +
    "\004\020\251\001\002\000\004\103\252\001\002\000\004" +
    "\032\253\001\002\000\004\124\254\001\002\000\012\026" +
    "\043\027\040\076\041\134\037\001\002\000\004\103\256" +
    "\001\002\000\004\007\257\001\002\000\004\124\260\001" +
    "\002\000\004\134\261\001\002\000\004\103\262\001\002" +
    "\000\004\010\263\001\002\000\004\124\264\001\002\000" +
    "\004\135\265\001\002\000\004\103\266\001\002\000\004" +
    "\020\267\001\002\000\012\002\uffb9\005\uffb9\006\uffb9\040" +
    "\uffb9\001\002\000\012\026\043\027\040\076\041\134\037" +
    "\001\002\000\004\103\272\001\002\000\004\007\273\001" +
    "\002\000\004\124\274\001\002\000\004\134\275\001\002" +
    "\000\004\103\276\001\002\000\004\010\277\001\002\000" +
    "\004\124\300\001\002\000\004\135\301\001\002\000\004" +
    "\103\302\001\002\000\004\020\303\001\002\000\012\002" +
    "\uffb5\005\uffb5\006\uffb5\040\uffb5\001\002\000\012\026\043" +
    "\027\040\076\041\134\037\001\002\000\004\103\306\001" +
    "\002\000\004\007\307\001\002\000\004\124\310\001\002" +
    "\000\004\134\311\001\002\000\004\103\312\001\002\000" +
    "\004\010\313\001\002\000\004\124\314\001\002\000\004" +
    "\135\315\001\002\000\004\103\316\001\002\000\004\020" +
    "\317\001\002\000\012\002\uffb3\005\uffb3\006\uffb3\040\uffb3" +
    "\001\002\000\004\002\001\001\002\000\004\017\322\001" +
    "\002\000\004\013\324\001\002\000\016\023\350\025\344" +
    "\034\343\054\342\146\352\147\346\001\002\000\004\124" +
    "\325\001\002\000\004\017\326\001\002\000\006\020\331" +
    "\136\330\001\002\000\004\020\335\001\002\000\006\020" +
    "\uffe8\110\333\001\002\000\004\103\332\001\002\000\016" +
    "\023\ufff8\025\ufff8\034\ufff8\054\ufff8\146\ufff8\147\ufff8\001" +
    "\002\000\004\136\330\001\002\000\004\020\uffe7\001\002" +
    "\000\004\103\336\001\002\000\016\023\ufff9\025\ufff9\034" +
    "\ufff9\054\ufff9\146\ufff9\147\ufff9\001\002\000\020\020\ufff0" +
    "\023\350\025\344\034\343\054\342\146\352\147\346\001" +
    "\002\000\020\020\ufff2\023\350\025\344\034\343\054\342" +
    "\146\352\147\346\001\002\000\004\020\u01fa\001\002\000" +
    "\004\124\u01f7\001\002\000\004\017\u01b9\001\002\000\004" +
    "\017\u01a8\001\002\000\020\020\uffee\023\350\025\344\034" +
    "\343\054\342\146\352\147\346\001\002\000\004\017\uffc3" +
    "\001\002\000\004\017\u019d\001\002\000\004\017\356\001" +
    "\002\000\020\020\ufff1\023\350\025\344\034\343\054\342" +
    "\146\352\147\346\001\002\000\004\017\uffc4\001\002\000" +
    "\020\020\uffef\023\350\025\344\034\343\054\342\146\352" +
    "\147\346\001\002\000\004\020\ufff4\001\002\000\004\020" +
    "\ufff6\001\002\000\070\051\376\052\u0103\055\357\056\u0106" +
    "\061\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067" +
    "\375\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370" +
    "\102\367\105\371\111\364\127\366\130\u0104\134\u0109\135" +
    "\u010e\136\360\137\u010b\150\u010d\001\002\000\004\024\u0198" +
    "\001\002\000\056\020\uff9c\057\uff9c\060\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\101\uff9c\103\uff9c\105\u0117\106\uff9c" +
    "\110\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c\122" +
    "\uff9c\123\uff9c\124\uff9c\125\uff9c\131\uff9c\001\002\000\070" +
    "\051\376\052\u0103\055\357\056\u0106\061\363\062\362\063" +
    "\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108" +
    "\072\u0105\073\361\076\u0102\077\370\102\367\105\371\111" +
    "\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b" +
    "\150\u010d\001\002\000\004\105\u0194\001\002\000\070\051" +
    "\376\052\u0103\055\357\056\u0106\061\363\062\362\063\372" +
    "\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108\072" +
    "\u0105\073\361\076\u0102\077\370\102\367\105\371\111\364" +
    "\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150" +
    "\u010d\001\002\000\070\051\376\052\u0103\055\357\056\u0106" +
    "\061\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067" +
    "\375\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370" +
    "\102\367\105\371\111\364\127\366\130\u0104\134\u0109\135" +
    "\u010e\136\360\137\u010b\150\u010d\001\002\000\040\057\u0139" +
    "\060\u013b\073\uff7c\074\uff7c\075\uff7c\076\uff7c\103\u018e\115" +
    "\uff7c\116\uff7c\117\uff7c\120\uff7c\122\u013a\123\u0138\125\uff7c" +
    "\131\uff7c\001\002\000\052\020\uff90\057\uff90\060\uff90\073" +
    "\uff90\074\uff90\075\uff90\076\uff90\101\uff90\103\uff90\106\uff90" +
    "\110\uff90\114\uff90\115\uff90\116\uff90\117\uff90\120\uff90\122" +
    "\uff90\123\uff90\125\uff90\131\uff90\001\002\000\004\105\u0181" +
    "\001\002\000\004\105\u017a\001\002\000\070\051\376\052" +
    "\u0103\055\357\056\u0106\061\363\062\362\063\372\064\u010a" +
    "\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073" +
    "\361\076\u0102\077\370\102\367\105\371\111\364\127\366" +
    "\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001" +
    "\002\000\004\105\u0173\001\002\000\004\105\u0170\001\002" +
    "\000\026\073\u0126\074\u012a\075\u0127\076\u0121\115\u0128\116" +
    "\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001\002\000\004" +
    "\105\u016b\001\002\000\004\024\u0166\001\002\000\004\020" +
    "\u0164\001\002\000\004\105\u0161\001\002\000\004\105\u0157" +
    "\001\002\000\070\051\376\052\u0103\055\357\056\u0106\061" +
    "\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067\375" +
    "\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370\102" +
    "\367\105\371\111\364\127\366\130\u0104\134\u0109\135\u010e" +
    "\136\360\137\u010b\150\u010d\001\002\000\004\024\u0151\001" +
    "\002\000\052\020\uff8f\057\uff8f\060\uff8f\073\uff8f\074\uff8f" +
    "\075\uff8f\076\uff8f\101\uff8f\103\uff8f\106\uff8f\110\uff8f\114" +
    "\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f\122\uff8f\123\uff8f" +
    "\125\uff8f\131\uff8f\001\002\000\004\105\u014e\001\002\000" +
    "\004\024\u0143\001\002\000\052\020\uff91\057\uff91\060\uff91" +
    "\073\uff91\074\uff91\075\uff91\076\uff91\101\uff91\103\uff91\106" +
    "\uff91\110\uff91\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91" +
    "\122\uff91\123\uff91\125\uff91\131\uff91\001\002\000\004\105" +
    "\u0140\001\002\000\052\020\uff7a\057\uff7a\060\uff7a\073\uff7a" +
    "\074\uff7a\075\uff7a\076\uff7a\101\uff7a\103\uff7a\106\uff7a\110" +
    "\uff7a\114\uff7a\115\uff7a\116\uff7a\117\uff7a\120\uff7a\122\uff7a" +
    "\123\uff7a\125\uff7a\131\uff7a\001\002\000\004\105\u011e\001" +
    "\002\000\006\125\u0110\131\u0111\001\002\000\072\020\uffbd" +
    "\051\376\052\u0103\055\357\056\u0106\061\363\062\362\063" +
    "\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108" +
    "\072\u0105\073\361\076\u0102\077\370\102\367\105\371\111" +
    "\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b" +
    "\150\u010d\001\002\000\052\020\uff7b\057\uff7b\060\uff7b\073" +
    "\uff7b\074\uff7b\075\uff7b\076\uff7b\101\uff7b\103\uff7b\106\uff7b" +
    "\110\uff7b\114\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\122" +
    "\uff7b\123\uff7b\125\uff7b\131\uff7b\001\002\000\052\020\uff79" +
    "\057\uff79\060\uff79\073\uff79\074\uff79\075\uff79\076\uff79\101" +
    "\uff79\103\uff79\106\uff79\110\uff79\114\uff79\115\uff79\116\uff79" +
    "\117\uff79\120\uff79\122\uff79\123\uff79\125\uff79\131\uff79\001" +
    "\002\000\004\020\uffbc\001\002\000\010\136\u0114\137\u0112" +
    "\150\u0115\001\002\000\010\136\u0114\137\u0112\150\u0115\001" +
    "\002\000\052\020\uffa0\057\uffa0\060\uffa0\073\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\101\uffa0\103\uffa0\106\uffa0\110\uffa0\114" +
    "\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\122\uffa0\123\uffa0" +
    "\125\uffa0\131\uffa0\001\002\000\052\020\uff9f\057\uff9f\060" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\101\uff9f\103\uff9f" +
    "\106\uff9f\110\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f\120" +
    "\uff9f\122\uff9f\123\uff9f\125\uff9f\131\uff9f\001\002\000\054" +
    "\020\uffa1\057\uffa1\060\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\101\uffa1\103\uffa1\105\u0117\106\uffa1\110\uffa1\114\uffa1" +
    "\115\uffa1\116\uffa1\117\uffa1\120\uffa1\122\uffa1\123\uffa1\125" +
    "\uffa1\131\uffa1\001\002\000\052\020\uff9e\057\uff9e\060\uff9e" +
    "\073\uff9e\074\uff9e\075\uff9e\076\uff9e\101\uff9e\103\uff9e\106" +
    "\uff9e\110\uff9e\114\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e" +
    "\122\uff9e\123\uff9e\125\uff9e\131\uff9e\001\002\000\052\020" +
    "\uff8b\057\uff8b\060\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b" +
    "\101\uff8b\103\uff8b\106\uff8b\110\uff8b\114\uff8b\115\uff8b\116" +
    "\uff8b\117\uff8b\120\uff8b\122\uff8b\123\uff8b\125\uff8b\131\uff8b" +
    "\001\002\000\010\136\u0114\137\u0112\150\u0115\001\002\000" +
    "\004\106\u011c\001\002\000\006\106\uff9b\110\u011a\001\002" +
    "\000\010\136\u0114\137\u0112\150\u0115\001\002\000\004\106" +
    "\uff9a\001\002\000\054\020\uff9d\057\uff9d\060\uff9d\073\uff9d" +
    "\074\uff9d\075\uff9d\076\uff9d\101\uff9d\103\uff9d\106\uff9d\110" +
    "\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\120\uff9d\122\uff9d" +
    "\123\uff9d\124\uff9d\125\uff9d\131\uff9d\001\002\000\052\020" +
    "\uff8c\057\uff8c\060\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c" +
    "\101\uff8c\103\uff8c\106\uff8c\110\uff8c\114\uff8c\115\uff8c\116" +
    "\uff8c\117\uff8c\120\uff8c\122\uff8c\123\uff8c\125\uff8c\131\uff8c" +
    "\001\002\000\070\051\376\052\u0103\055\357\056\u0106\061" +
    "\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067\375" +
    "\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370\102" +
    "\367\105\371\111\364\127\366\130\u0104\134\u0109\135\u010e" +
    "\136\360\137\u010b\150\u010d\001\002\000\052\020\uff7c\057" +
    "\u0139\060\u013b\073\uff7c\074\uff7c\075\uff7c\076\uff7c\101\uff7c" +
    "\103\uff7c\106\uff7c\110\uff7c\114\uff7c\115\uff7c\116\uff7c\117" +
    "\uff7c\120\uff7c\122\u013a\123\u0138\125\uff7c\131\uff7c\001\002" +
    "\000\030\073\u0126\074\u012a\075\u0127\076\u0121\110\u0129\115" +
    "\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001\002" +
    "\000\070\051\376\052\u0103\055\357\056\u0106\061\363\062" +
    "\362\063\372\064\u010a\065\u0100\066\u0101\067\375\070\373" +
    "\071\u0108\072\u0105\073\361\076\u0102\077\370\102\367\105" +
    "\371\111\364\127\366\130\u0104\134\u0109\135\u010e\136\360" +
    "\137\u010b\150\u010d\001\002\000\070\051\376\052\u0103\055" +
    "\357\056\u0106\061\363\062\362\063\372\064\u010a\065\u0100" +
    "\066\u0101\067\375\070\373\071\u0108\072\u0105\073\361\076" +
    "\u0102\077\370\102\367\105\371\111\364\127\366\130\u0104" +
    "\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001\002\000" +
    "\070\051\376\052\u0103\055\357\056\u0106\061\363\062\362" +
    "\063\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071" +
    "\u0108\072\u0105\073\361\076\u0102\077\370\102\367\105\371" +
    "\111\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137" +
    "\u010b\150\u010d\001\002\000\070\051\376\052\u0103\055\357" +
    "\056\u0106\061\363\062\362\063\372\064\u010a\065\u0100\066" +
    "\u0101\067\375\070\373\071\u0108\072\u0105\073\361\076\u0102" +
    "\077\370\102\367\105\371\111\364\127\366\130\u0104\134" +
    "\u0109\135\u010e\136\360\137\u010b\150\u010d\001\002\000\070" +
    "\051\376\052\u0103\055\357\056\u0106\061\363\062\362\063" +
    "\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108" +
    "\072\u0105\073\361\076\u0102\077\370\102\367\105\371\111" +
    "\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b" +
    "\150\u010d\001\002\000\070\051\376\052\u0103\055\357\056" +
    "\u0106\061\363\062\362\063\372\064\u010a\065\u0100\066\u0101" +
    "\067\375\070\373\071\u0108\072\u0105\073\361\076\u0102\077" +
    "\370\102\367\105\371\111\364\127\366\130\u0104\134\u0109" +
    "\135\u010e\136\360\137\u010b\150\u010d\001\002\000\070\051" +
    "\376\052\u0103\055\357\056\u0106\061\363\062\362\063\372" +
    "\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108\072" +
    "\u0105\073\361\076\u0102\077\370\102\367\105\371\111\364" +
    "\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150" +
    "\u010d\001\002\000\070\051\376\052\u0103\055\357\056\u0106" +
    "\061\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067" +
    "\375\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370" +
    "\102\367\105\371\111\364\127\366\130\u0104\134\u0109\135" +
    "\u010e\136\360\137\u010b\150\u010d\001\002\000\070\051\376" +
    "\052\u0103\055\357\056\u0106\061\363\062\362\063\372\064" +
    "\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105" +
    "\073\361\076\u0102\077\370\102\367\105\371\111\364\127" +
    "\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d" +
    "\001\002\000\070\051\376\052\u0103\055\357\056\u0106\061" +
    "\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067\375" +
    "\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370\102" +
    "\367\105\371\111\364\127\366\130\u0104\134\u0109\135\u010e" +
    "\136\360\137\u010b\150\u010d\001\002\000\070\051\376\052" +
    "\u0103\055\357\056\u0106\061\363\062\362\063\372\064\u010a" +
    "\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073" +
    "\361\076\u0102\077\370\102\367\105\371\111\364\127\366" +
    "\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001" +
    "\002\000\052\020\uff8a\057\uff8a\060\uff8a\073\u0126\074\u012a" +
    "\075\u0127\076\u0121\101\uff8a\103\uff8a\106\uff8a\110\uff8a\114" +
    "\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\122\uff8a\123\uff8a" +
    "\125\uff8a\131\uff8a\001\002\000\052\020\uff74\057\uff74\060" +
    "\uff74\073\uff74\074\uff74\075\uff74\076\uff74\101\uff74\103\uff74" +
    "\106\uff74\110\uff74\114\uff74\115\uff74\116\uff74\117\uff74\120" +
    "\uff74\122\uff74\123\uff74\125\uff74\131\uff74\001\002\000\030" +
    "\073\u0126\074\u012a\075\u0127\076\u0121\106\u012f\115\u0128\116" +
    "\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001\002\000\052" +
    "\020\uff6a\057\uff6a\060\uff6a\073\uff6a\074\uff6a\075\uff6a\076" +
    "\uff6a\101\uff6a\103\uff6a\106\uff6a\110\uff6a\114\uff6a\115\uff6a" +
    "\116\uff6a\117\uff6a\120\uff6a\122\uff6a\123\uff6a\125\uff6a\131" +
    "\uff6a\001\002\000\052\020\uff86\057\uff86\060\uff86\073\u0126" +
    "\074\u012a\075\u0127\076\u0121\101\uff86\103\uff86\106\uff86\110" +
    "\uff86\114\uff86\115\uff86\116\uff86\117\uff86\120\uff86\122\uff86" +
    "\123\uff86\125\uff86\131\uff86\001\002\000\052\020\uff73\057" +
    "\uff73\060\uff73\073\uff73\074\uff73\075\uff73\076\uff73\101\uff73" +
    "\103\uff73\106\uff73\110\uff73\114\uff73\115\uff73\116\uff73\117" +
    "\uff73\120\uff73\122\uff73\123\uff73\125\uff73\131\uff73\001\002" +
    "\000\052\020\uff72\057\uff72\060\uff72\073\uff72\074\u012a\075" +
    "\u0127\076\uff72\101\uff72\103\uff72\106\uff72\110\uff72\114\uff72" +
    "\115\uff72\116\uff72\117\uff72\120\uff72\122\uff72\123\uff72\125" +
    "\uff72\131\uff72\001\002\000\052\020\uff89\057\uff89\060\uff89" +
    "\073\u0126\074\u012a\075\u0127\076\u0121\101\uff89\103\uff89\106" +
    "\uff89\110\uff89\114\uff89\115\uff89\116\uff89\117\uff89\120\uff89" +
    "\122\uff89\123\uff89\125\uff89\131\uff89\001\002\000\052\020" +
    "\uff87\057\uff87\060\uff87\073\u0126\074\u012a\075\u0127\076\u0121" +
    "\101\uff87\103\uff87\106\uff87\110\uff87\114\uff87\115\uff87\116" +
    "\uff87\117\uff87\120\uff87\122\uff87\123\uff87\125\uff87\131\uff87" +
    "\001\002\000\052\020\uff88\057\uff88\060\uff88\073\u0126\074" +
    "\u012a\075\u0127\076\u0121\101\uff88\103\uff88\106\uff88\110\uff88" +
    "\114\uff88\115\uff88\116\uff88\117\uff88\120\uff88\122\uff88\123" +
    "\uff88\125\uff88\131\uff88\001\002\000\052\020\uff85\057\uff85" +
    "\060\uff85\073\u0126\074\u012a\075\u0127\076\u0121\101\uff85\103" +
    "\uff85\106\uff85\110\uff85\114\uff85\115\uff85\116\uff85\117\uff85" +
    "\120\uff85\122\uff85\123\uff85\125\uff85\131\uff85\001\002\000" +
    "\052\020\uff71\057\uff71\060\uff71\073\uff71\074\u012a\075\u0127" +
    "\076\uff71\101\uff71\103\uff71\106\uff71\110\uff71\114\uff71\115" +
    "\uff71\116\uff71\117\uff71\120\uff71\122\uff71\123\uff71\125\uff71" +
    "\131\uff71\001\002\000\070\051\376\052\u0103\055\357\056" +
    "\u0106\061\363\062\362\063\372\064\u010a\065\u0100\066\u0101" +
    "\067\375\070\373\071\u0108\072\u0105\073\361\076\u0102\077" +
    "\370\102\367\105\371\111\364\127\366\130\u0104\134\u0109" +
    "\135\u010e\136\360\137\u010b\150\u010d\001\002\000\070\051" +
    "\376\052\u0103\055\357\056\u0106\061\363\062\362\063\372" +
    "\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108\072" +
    "\u0105\073\361\076\u0102\077\370\102\367\105\371\111\364" +
    "\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150" +
    "\u010d\001\002\000\070\051\376\052\u0103\055\357\056\u0106" +
    "\061\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067" +
    "\375\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370" +
    "\102\367\105\371\111\364\127\366\130\u0104\134\u0109\135" +
    "\u010e\136\360\137\u010b\150\u010d\001\002\000\070\051\376" +
    "\052\u0103\055\357\056\u0106\061\363\062\362\063\372\064" +
    "\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105" +
    "\073\361\076\u0102\077\370\102\367\105\371\111\364\127" +
    "\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d" +
    "\001\002\000\052\020\uff82\057\u0139\060\uff82\073\uff82\074" +
    "\uff82\075\uff82\076\uff82\101\uff82\103\uff82\106\uff82\110\uff82" +
    "\114\uff82\115\uff82\116\uff82\117\uff82\120\uff82\122\uff82\123" +
    "\uff82\125\uff82\131\uff82\001\002\000\052\020\uff81\057\u0139" +
    "\060\u013b\073\uff81\074\uff81\075\uff81\076\uff81\101\uff81\103" +
    "\uff81\106\uff81\110\uff81\114\uff81\115\uff81\116\uff81\117\uff81" +
    "\120\uff81\122\uff81\123\uff81\125\uff81\131\uff81\001\002\000" +
    "\052\020\uff83\057\uff83\060\uff83\073\uff83\074\uff83\075\uff83" +
    "\076\uff83\101\uff83\103\uff83\106\uff83\110\uff83\114\uff83\115" +
    "\uff83\116\uff83\117\uff83\120\uff83\122\uff83\123\uff83\125\uff83" +
    "\131\uff83\001\002\000\052\020\uff80\057\u0139\060\u013b\073" +
    "\uff80\074\uff80\075\uff80\076\uff80\101\uff80\103\uff80\106\uff80" +
    "\110\uff80\114\uff80\115\uff80\116\uff80\117\uff80\120\uff80\122" +
    "\u013a\123\uff80\125\uff80\131\uff80\001\002\000\070\051\376" +
    "\052\u0103\055\357\056\u0106\061\363\062\362\063\372\064" +
    "\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105" +
    "\073\361\076\u0102\077\370\102\367\105\371\111\364\127" +
    "\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d" +
    "\001\002\000\030\073\u0126\074\u012a\075\u0127\076\u0121\106" +
    "\u0142\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125" +
    "\001\002\000\052\020\uff68\057\uff68\060\uff68\073\uff68\074" +
    "\uff68\075\uff68\076\uff68\101\uff68\103\uff68\106\uff68\110\uff68" +
    "\114\uff68\115\uff68\116\uff68\117\uff68\120\uff68\122\uff68\123" +
    "\uff68\125\uff68\131\uff68\001\002\000\004\017\u0144\001\002" +
    "\000\004\137\u0145\001\002\000\004\113\u014c\001\002\000" +
    "\004\020\u014a\001\002\000\006\020\uff99\110\u0148\001\002" +
    "\000\004\137\u0145\001\002\000\004\020\uff98\001\002\000" +
    "\070\051\376\052\u0103\055\357\056\u0106\061\363\062\362" +
    "\063\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071" +
    "\u0108\072\u0105\073\361\076\u0102\077\370\102\367\105\371" +
    "\111\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137" +
    "\u010b\150\u010d\001\002\000\052\020\uff7e\057\u0139\060\u013b" +
    "\073\uff7e\074\uff7e\075\uff7e\076\uff7e\101\uff7e\103\uff7e\106" +
    "\uff7e\110\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e\120\uff7e" +
    "\122\u013a\123\u0138\125\uff7e\131\uff7e\001\002\000\004\136" +
    "\u014d\001\002\000\006\020\uff97\110\uff97\001\002\000\070" +
    "\051\376\052\u0103\055\357\056\u0106\061\363\062\362\063" +
    "\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108" +
    "\072\u0105\073\361\076\u0102\077\370\102\367\105\371\111" +
    "\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b" +
    "\150\u010d\001\002\000\030\073\u0126\074\u012a\075\u0127\076" +
    "\u0121\106\u0150\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b" +
    "\131\u0125\001\002\000\052\020\uff66\057\uff66\060\uff66\073" +
    "\uff66\074\uff66\075\uff66\076\uff66\101\uff66\103\uff66\106\uff66" +
    "\110\uff66\114\uff66\115\uff66\116\uff66\117\uff66\120\uff66\122" +
    "\uff66\123\uff66\125\uff66\131\uff66\001\002\000\004\017\u0152" +
    "\001\002\000\004\137\u0145\001\002\000\004\020\u0154\001" +
    "\002\000\070\051\376\052\u0103\055\357\056\u0106\061\363" +
    "\062\362\063\372\064\u010a\065\u0100\066\u0101\067\375\070" +
    "\373\071\u0108\072\u0105\073\361\076\u0102\077\370\102\367" +
    "\105\371\111\364\127\366\130\u0104\134\u0109\135\u010e\136" +
    "\360\137\u010b\150\u010d\001\002\000\052\020\uff6f\057\uff6f" +
    "\060\uff6f\073\u0126\074\u012a\075\u0127\076\u0121\101\uff6f\103" +
    "\uff6f\106\uff6f\110\uff6f\114\uff6f\115\u0128\116\u0122\117\u0123" +
    "\120\u0124\122\uff6f\123\uff6f\125\u012b\131\u0125\001\002\000" +
    "\052\020\uff75\057\uff75\060\uff75\073\uff75\074\uff75\075\uff75" +
    "\076\uff75\101\uff75\103\uff75\106\uff75\110\uff75\114\uff75\115" +
    "\uff75\116\uff75\117\uff75\120\uff75\122\uff75\123\uff75\125\uff75" +
    "\131\uff75\001\002\000\004\136\u0158\001\002\000\004\110" +
    "\u0159\001\002\000\004\150\u015b\001\002\000\004\106\u0160" +
    "\001\002\000\004\113\u015c\001\002\000\070\051\376\052" +
    "\u0103\055\357\056\u0106\061\363\062\362\063\372\064\u010a" +
    "\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073" +
    "\361\076\u0102\077\370\102\367\105\371\111\364\127\366" +
    "\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001" +
    "\002\000\032\073\u0126\074\u012a\075\u0127\076\u0121\106\uff96" +
    "\110\u015e\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131" +
    "\u0125\001\002\000\004\150\u015b\001\002\000\004\106\uff95" +
    "\001\002\000\052\020\uff67\057\uff67\060\uff67\073\uff67\074" +
    "\uff67\075\uff67\076\uff67\101\uff67\103\uff67\106\uff67\110\uff67" +
    "\114\uff67\115\uff67\116\uff67\117\uff67\120\uff67\122\uff67\123" +
    "\uff67\125\uff67\131\uff67\001\002\000\070\051\376\052\u0103" +
    "\055\357\056\u0106\061\363\062\362\063\372\064\u010a\065" +
    "\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073\361" +
    "\076\u0102\077\370\102\367\105\371\111\364\127\366\130" +
    "\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001\002" +
    "\000\030\073\u0126\074\u012a\075\u0127\076\u0121\106\u0163\115" +
    "\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001\002" +
    "\000\052\020\uff7d\057\uff7d\060\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\076\uff7d\101\uff7d\103\uff7d\106\uff7d\110\uff7d\114\uff7d" +
    "\115\uff7d\116\uff7d\117\uff7d\120\uff7d\122\uff7d\123\uff7d\125" +
    "\uff7d\131\uff7d\001\002\000\004\103\u0165\001\002\000\020" +
    "\020\uffbe\023\uffbe\025\uffbe\034\uffbe\054\uffbe\146\uffbe\147" +
    "\uffbe\001\002\000\004\017\u0167\001\002\000\004\137\u0145" +
    "\001\002\000\004\020\u0169\001\002\000\070\051\376\052" +
    "\u0103\055\357\056\u0106\061\363\062\362\063\372\064\u010a" +
    "\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073" +
    "\361\076\u0102\077\370\102\367\105\371\111\364\127\366" +
    "\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001" +
    "\002\000\052\020\uff70\057\uff70\060\uff70\073\u0126\074\u012a" +
    "\075\u0127\076\u0121\101\uff70\103\uff70\106\uff70\110\uff70\114" +
    "\uff70\115\u0128\116\u0122\117\u0123\120\u0124\122\uff70\123\uff70" +
    "\125\u012b\131\u0125\001\002\000\070\051\376\052\u0103\055" +
    "\357\056\u0106\061\363\062\362\063\372\064\u010a\065\u0100" +
    "\066\u0101\067\375\070\373\071\u0108\072\u0105\073\361\076" +
    "\u0102\077\370\102\367\105\371\111\364\127\366\130\u0104" +
    "\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001\002\000" +
    "\030\073\u0126\074\u012a\075\u0127\076\u0121\110\u016d\115\u0128" +
    "\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001\002\000" +
    "\070\051\376\052\u0103\055\357\056\u0106\061\363\062\362" +
    "\063\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071" +
    "\u0108\072\u0105\073\361\076\u0102\077\370\102\367\105\371" +
    "\111\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137" +
    "\u010b\150\u010d\001\002\000\030\073\u0126\074\u012a\075\u0127" +
    "\076\u0121\106\u016f\115\u0128\116\u0122\117\u0123\120\u0124\125" +
    "\u012b\131\u0125\001\002\000\052\020\uff69\057\uff69\060\uff69" +
    "\073\uff69\074\uff69\075\uff69\076\uff69\101\uff69\103\uff69\106" +
    "\uff69\110\uff69\114\uff69\115\uff69\116\uff69\117\uff69\120\uff69" +
    "\122\uff69\123\uff69\125\uff69\131\uff69\001\002\000\070\051" +
    "\376\052\u0103\055\357\056\u0106\061\363\062\362\063\372" +
    "\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108\072" +
    "\u0105\073\361\076\u0102\077\370\102\367\105\371\111\364" +
    "\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150" +
    "\u010d\001\002\000\030\073\u0126\074\u012a\075\u0127\076\u0121" +
    "\106\u0172\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131" +
    "\u0125\001\002\000\052\020\uff65\057\uff65\060\uff65\073\uff65" +
    "\074\uff65\075\uff65\076\uff65\101\uff65\103\uff65\106\uff65\110" +
    "\uff65\114\uff65\115\uff65\116\uff65\117\uff65\120\uff65\122\uff65" +
    "\123\uff65\125\uff65\131\uff65\001\002\000\070\051\376\052" +
    "\u0103\055\357\056\u0106\061\363\062\362\063\372\064\u010a" +
    "\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073" +
    "\361\076\u0102\077\370\102\367\105\371\111\364\127\366" +
    "\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001" +
    "\002\000\030\073\u0126\074\u012a\075\u0127\076\u0121\106\u0175" +
    "\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001" +
    "\002\000\052\020\uff6c\057\uff6c\060\uff6c\073\uff6c\074\uff6c" +
    "\075\uff6c\076\uff6c\101\uff6c\103\uff6c\106\uff6c\110\uff6c\114" +
    "\uff6c\115\uff6c\116\uff6c\117\uff6c\120\uff6c\122\uff6c\123\uff6c" +
    "\125\uff6c\131\uff6c\001\002\000\040\057\u0139\060\u013b\073" +
    "\uff7c\074\uff7c\075\uff7c\076\uff7c\106\u0179\115\uff7c\116\uff7c" +
    "\117\uff7c\120\uff7c\122\u013a\123\u0138\125\uff7c\131\uff7c\001" +
    "\002\000\030\073\u0126\074\u012a\075\u0127\076\u0121\106\u0178" +
    "\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001" +
    "\002\000\052\020\uff77\057\uff77\060\uff77\073\uff77\074\uff77" +
    "\075\uff77\076\uff77\101\uff77\103\uff77\106\uff77\110\uff77\114" +
    "\uff77\115\uff77\116\uff77\117\uff77\120\uff77\122\uff77\123\uff77" +
    "\125\uff77\131\uff77\001\002\000\052\020\uff8d\057\uff8d\060" +
    "\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\101\uff8d\103\uff8d" +
    "\106\uff8d\110\uff8d\114\uff8d\115\uff8d\116\uff8d\117\uff8d\120" +
    "\uff8d\122\uff8d\123\uff8d\125\uff8d\131\uff8d\001\002\000\070" +
    "\051\376\052\u0103\055\357\056\u0106\061\363\062\362\063" +
    "\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108" +
    "\072\u0105\073\361\076\u0102\077\370\102\367\105\371\111" +
    "\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b" +
    "\150\u010d\001\002\000\040\057\u0139\060\u013b\073\uff7c\074" +
    "\uff7c\075\uff7c\076\uff7c\106\u017c\115\uff7c\116\uff7c\117\uff7c" +
    "\120\uff7c\122\u013a\123\u0138\125\uff7c\131\uff7c\001\002\000" +
    "\004\100\u017d\001\002\000\070\051\376\052\u0103\055\357" +
    "\056\u0106\061\363\062\362\063\372\064\u010a\065\u0100\066" +
    "\u0101\067\375\070\373\071\u0108\072\u0105\073\361\076\u0102" +
    "\077\370\102\367\105\371\111\364\127\366\130\u0104\134" +
    "\u0109\135\u010e\136\360\137\u010b\150\u010d\001\002\000\030" +
    "\073\u0126\074\u012a\075\u0127\076\u0121\101\u017f\115\u0128\116" +
    "\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001\002\000\070" +
    "\051\376\052\u0103\055\357\056\u0106\061\363\062\362\063" +
    "\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108" +
    "\072\u0105\073\361\076\u0102\077\370\102\367\105\371\111" +
    "\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b" +
    "\150\u010d\001\002\000\052\020\uff6e\057\uff6e\060\uff6e\073" +
    "\u0126\074\u012a\075\u0127\076\u0121\101\uff6e\103\uff6e\106\uff6e" +
    "\110\uff6e\114\uff6e\115\u0128\116\u0122\117\u0123\120\u0124\122" +
    "\uff6e\123\uff6e\125\u012b\131\u0125\001\002\000\004\136\360" +
    "\001\002\000\004\106\u0183\001\002\000\004\017\u0184\001" +
    "\002\000\004\041\u0187\001\002\000\006\020\uff94\110\u018c" +
    "\001\002\000\004\020\u018b\001\002\000\004\150\u0188\001" +
    "\002\000\004\113\u0189\001\002\000\070\051\376\052\u0103" +
    "\055\357\056\u0106\061\363\062\362\063\372\064\u010a\065" +
    "\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073\361" +
    "\076\u0102\077\370\102\367\105\371\111\364\127\366\130" +
    "\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001\002" +
    "\000\032\020\uff92\073\u0126\074\u012a\075\u0127\076\u0121\110" +
    "\uff92\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125" +
    "\001\002\000\052\020\uff6d\057\uff6d\060\uff6d\073\uff6d\074" +
    "\uff6d\075\uff6d\076\uff6d\101\uff6d\103\uff6d\106\uff6d\110\uff6d" +
    "\114\uff6d\115\uff6d\116\uff6d\117\uff6d\120\uff6d\122\uff6d\123" +
    "\uff6d\125\uff6d\131\uff6d\001\002\000\004\041\u0187\001\002" +
    "\000\004\020\uff93\001\002\000\072\020\uffbb\051\uffbb\052" +
    "\uffbb\055\uffbb\056\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073" +
    "\uffbb\076\uffbb\077\uffbb\102\uffbb\105\uffbb\111\uffbb\127\uffbb" +
    "\130\uffbb\134\uffbb\135\uffbb\136\uffbb\137\uffbb\150\uffbb\001" +
    "\002\000\040\057\u0139\060\u013b\073\uff7c\074\uff7c\075\uff7c" +
    "\076\uff7c\114\u0192\115\uff7c\116\uff7c\117\uff7c\120\uff7c\122" +
    "\u013a\123\u0138\125\uff7c\131\uff7c\001\002\000\030\073\u0126" +
    "\074\u012a\075\u0127\076\u0121\114\u0191\115\u0128\116\u0122\117" +
    "\u0123\120\u0124\125\u012b\131\u0125\001\002\000\052\020\uff78" +
    "\057\uff78\060\uff78\073\uff78\074\uff78\075\uff78\076\uff78\101" +
    "\uff78\103\uff78\106\uff78\110\uff78\114\uff78\115\uff78\116\uff78" +
    "\117\uff78\120\uff78\122\uff78\123\uff78\125\uff78\131\uff78\001" +
    "\002\000\052\020\uff8e\057\uff8e\060\uff8e\073\uff8e\074\uff8e" +
    "\075\uff8e\076\uff8e\101\uff8e\103\uff8e\106\uff8e\110\uff8e\114" +
    "\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e\122\uff8e\123\uff8e" +
    "\125\uff8e\131\uff8e\001\002\000\052\020\uff84\057\uff84\060" +
    "\uff84\073\uff84\074\uff84\075\uff84\076\uff84\101\uff84\103\uff84" +
    "\106\uff84\110\uff84\114\uff84\115\uff84\116\uff84\117\uff84\120" +
    "\uff84\122\uff84\123\uff84\125\uff84\131\uff84\001\002\000\070" +
    "\051\376\052\u0103\055\357\056\u0106\061\363\062\362\063" +
    "\372\064\u010a\065\u0100\066\u0101\067\375\070\373\071\u0108" +
    "\072\u0105\073\361\076\u0102\077\370\102\367\105\371\111" +
    "\364\127\366\130\u0104\134\u0109\135\u010e\136\360\137\u010b" +
    "\150\u010d\001\002\000\030\073\u0126\074\u012a\075\u0127\076" +
    "\u0121\106\u0196\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b" +
    "\131\u0125\001\002\000\052\020\uff6b\057\uff6b\060\uff6b\073" +
    "\uff6b\074\uff6b\075\uff6b\076\uff6b\101\uff6b\103\uff6b\106\uff6b" +
    "\110\uff6b\114\uff6b\115\uff6b\116\uff6b\117\uff6b\120\uff6b\122" +
    "\uff6b\123\uff6b\125\uff6b\131\uff6b\001\002\000\052\020\uff76" +
    "\057\uff76\060\uff76\073\uff76\074\uff76\075\uff76\076\uff76\101" +
    "\uff76\103\uff76\106\uff76\110\uff76\114\uff76\115\uff76\116\uff76" +
    "\117\uff76\120\uff76\122\uff76\123\uff76\125\uff76\131\uff76\001" +
    "\002\000\004\017\u0199\001\002\000\004\137\u0145\001\002" +
    "\000\004\020\u019b\001\002\000\070\051\376\052\u0103\055" +
    "\357\056\u0106\061\363\062\362\063\372\064\u010a\065\u0100" +
    "\066\u0101\067\375\070\373\071\u0108\072\u0105\073\361\076" +
    "\u0102\077\370\102\367\105\371\111\364\127\366\130\u0104" +
    "\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001\002\000" +
    "\052\020\uff7f\057\u0139\060\u013b\073\uff7f\074\uff7f\075\uff7f" +
    "\076\uff7f\101\uff7f\103\uff7f\106\uff7f\110\uff7f\114\uff7f\115" +
    "\uff7f\116\uff7f\117\uff7f\120\uff7f\122\u013a\123\u0138\125\uff7f" +
    "\131\uff7f\001\002\000\004\136\360\001\002\000\004\124" +
    "\u01a4\001\002\000\006\020\uffc2\136\360\001\002\000\004" +
    "\020\u01a1\001\002\000\004\103\u01a2\001\002\000\020\020" +
    "\uffc5\023\uffc5\025\uffc5\034\uffc5\054\uffc5\146\uffc5\147\uffc5" +
    "\001\002\000\004\020\uffc1\001\002\000\070\051\376\052" +
    "\u0103\055\357\056\u0106\061\363\062\362\063\372\064\u010a" +
    "\065\u0100\066\u0101\067\375\070\373\071\u0108\072\u0105\073" +
    "\361\076\u0102\077\370\102\367\105\371\111\364\127\366" +
    "\130\u0104\134\u0109\135\u010e\136\360\137\u010b\150\u010d\001" +
    "\002\000\030\073\u0126\074\u012a\075\u0127\076\u0121\103\u01a6" +
    "\115\u0128\116\u0122\117\u0123\120\u0124\125\u012b\131\u0125\001" +
    "\002\000\006\020\uffc0\136\uffc0\001\002\000\004\020\ufff3" +
    "\001\002\000\004\136\u01ab\001\002\000\004\020\u01b7\001" +
    "\002\000\006\020\uffec\136\u01ab\001\002\000\004\113\u01ac" +
    "\001\002\000\006\017\u01ae\140\u01ad\001\002\000\004\103" +
    "\u01b5\001\002\000\004\150\u01af\001\002\000\006\020\uffe6" +
    "\110\u01b3\001\002\000\004\020\u01b1\001\002\000\004\103" +
    "\u01b2\001\002\000\006\020\uffe9\136\uffe9\001\002\000\004" +
    "\150\u01af\001\002\000\004\020\uffe5\001\002\000\006\020" +
    "\uffea\136\uffea\001\002\000\004\020\uffeb\001\002\000\004" +
    "\103\u01b8\001\002\000\020\020\uffed\023\uffed\025\uffed\034" +
    "\uffed\054\uffed\146\uffed\147\uffed\001\002\000\004\136\u01bb" +
    "\001\002\000\004\020\u01f5\001\002\000\006\105\u01bf\113" +
    "\u01be\001\002\000\006\020\uffcc\136\u01bb\001\002\000\004" +
    "\020\uffcb\001\002\000\004\017\uffd5\001\002\000\012\136" +
    "\u01ca\141\u01cb\143\u01cc\144\u01c8\001\002\000\004\017\u01c1" +
    "\001\002\000\014\036\u01c4\042\u01c2\043\u01c5\044\u01c3\145" +
    "\u01c6\001\002\000\004\110\u01e7\001\002\000\004\110\u01df" +
    "\001\002\000\004\110\u01d7\001\002\000\004\110\u01d3\001" +
    "\002\000\004\110\u01c7\001\002\000\012\136\u01ca\141\u01cb" +
    "\143\u01cc\144\u01c8\001\002\000\010\020\uffcf\106\uffcf\110" +
    "\uffcf\001\002\000\004\110\u01cd\001\002\000\010\020\uffd1" +
    "\106\uffd1\110\uffd1\001\002\000\010\020\uffce\106\uffce\110" +
    "\uffce\001\002\000\010\020\uffd0\106\uffd0\110\uffd0\001\002" +
    "\000\004\037\u01ce\001\002\000\004\124\u01cf\001\002\000" +
    "\024\026\076\027\104\076\074\127\103\130\106\134\037" +
    "\135\105\136\075\150\100\001\002\000\004\020\u01d1\001" +
    "\002\000\004\103\u01d2\001\002\000\006\020\uffc9\136\uffc9" +
    "\001\002\000\012\136\u01ca\141\u01cb\143\u01cc\144\u01c8\001" +
    "\002\000\004\020\u01d5\001\002\000\004\103\u01d6\001\002" +
    "\000\006\020\uffc7\136\uffc7\001\002\000\012\136\u01ca\141" +
    "\u01cb\143\u01cc\144\u01c8\001\002\000\004\110\u01d9\001\002" +
    "\000\004\037\u01da\001\002\000\004\124\u01db\001\002\000" +
    "\024\026\076\027\104\076\074\127\103\130\106\134\037" +
    "\135\105\136\075\150\100\001\002\000\004\020\u01dd\001" +
    "\002\000\004\103\u01de\001\002\000\006\020\uffca\136\uffca" +
    "\001\002\000\012\136\u01ca\141\u01cb\143\u01cc\144\u01c8\001" +
    "\002\000\004\110\u01e1\001\002\000\004\037\u01e2\001\002" +
    "\000\004\124\u01e3\001\002\000\024\026\076\027\104\076" +
    "\074\127\103\130\106\134\037\135\105\136\075\150\100" +
    "\001\002\000\004\020\u01e5\001\002\000\004\103\u01e6\001" +
    "\002\000\006\020\uffc6\136\uffc6\001\002\000\012\136\u01ca" +
    "\141\u01cb\143\u01cc\144\u01c8\001\002\000\004\110\u01e9\001" +
    "\002\000\004\046\u01ea\001\002\000\004\124\u01eb\001\002" +
    "\000\004\134\u01ec\001\002\000\004\020\u01ed\001\002\000" +
    "\004\103\u01ee\001\002\000\006\020\uffc8\136\uffc8\001\002" +
    "\000\006\106\uffd3\110\u01f3\001\002\000\004\106\u01f1\001" +
    "\002\000\004\113\u01f2\001\002\000\004\017\uffd4\001\002" +
    "\000\012\136\u01ca\141\u01cb\143\u01cc\144\u01c8\001\002\000" +
    "\004\106\uffd2\001\002\000\004\103\u01f6\001\002\000\020" +
    "\020\uffcd\023\uffcd\025\uffcd\034\uffcd\054\uffcd\146\uffcd\147" +
    "\uffcd\001\002\000\070\051\376\052\u0103\055\357\056\u0106" +
    "\061\363\062\362\063\372\064\u010a\065\u0100\066\u0101\067" +
    "\375\070\373\071\u0108\072\u0105\073\361\076\u0102\077\370" +
    "\102\367\105\371\111\364\127\366\130\u0104\134\u0109\135" +
    "\u010e\136\360\137\u010b\150\u010d\001\002\000\030\073\u0126" +
    "\074\u012a\075\u0127\076\u0121\103\u01f9\115\u0128\116\u0122\117" +
    "\u0123\120\u0124\125\u012b\131\u0125\001\002\000\020\020\uffbf" +
    "\023\uffbf\025\uffbf\034\uffbf\054\uffbf\146\uffbf\147\uffbf\001" +
    "\002\000\012\002\ufffa\005\ufffa\006\ufffa\040\ufffa\001\002" +
    "\000\004\020\ufff7\001\002\000\004\020\ufff5\001\002\000" +
    "\004\002\ufffe\001\002\000\004\017\u01ff\001\002\000\004" +
    "\005\u0200\001\002\000\004\124\u0201\001\002\000\004\136" +
    "\u0202\001\002\000\004\103\u0203\001\002\000\006\011\u0204" +
    "\040\u0205\001\002\000\004\017\u0209\001\002\000\006\061" +
    "\027\136\031\001\002\000\004\103\u0207\001\002\000\004" +
    "\020\u0208\001\002\000\012\002\uffb1\005\uffb1\006\uffb1\040" +
    "\uffb1\001\002\000\004\136\155\001\002\000\004\020\u020b" +
    "\001\002\000\004\103\u020c\001\002\000\004\040\u020d\001" +
    "\002\000\004\017\u020e\001\002\000\006\061\027\136\031" +
    "\001\002\000\004\020\u0210\001\002\000\004\103\u0211\001" +
    "\002\000\004\020\u0212\001\002\000\012\002\uffb2\005\uffb2" +
    "\006\uffb2\040\uffb2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\012\003\007\004\003\006\011\007\005\001" +
    "\001\000\012\003\u0212\004\003\006\011\007\005\001\001" +
    "\000\002\001\001\000\012\003\u01fc\004\003\006\011\007" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\012\004\003\006\011\007\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\031\046\027\001" +
    "\001\000\002\001\001\000\006\045\113\046\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\111\036\106\037\076\040\100" +
    "\001\001\000\004\047\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\065\001\001" +
    "\000\002\001\001\000\004\047\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\035\101" +
    "\036\106\037\076\040\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\131" +
    "\046\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\153\033\152\001\001" +
    "\000\006\032\223\033\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\167\046\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\241\033\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\247\046\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\322\001\001\000\020\005\340\011\337\020" +
    "\350\023\336\026\352\027\344\041\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\u01fb\011\337" +
    "\020\350\023\336\026\352\027\344\041\346\001\001\000" +
    "\020\005\u01fa\011\337\020\350\023\336\026\352\027\344" +
    "\041\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\u01a6\011\337" +
    "\020\350\023\336\026\352\027\344\041\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\354\011\337\020\350\023\336\026\352\027\344\041" +
    "\346\001\001\000\002\001\001\000\020\005\353\011\337" +
    "\020\350\023\336\026\352\027\344\041\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\376\031\u010b" +
    "\042\u0106\043\373\044\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\u0106\043\u0196\044\u011e\001\001" +
    "\000\002\001\001\000\010\042\u0106\043\373\044\u0192\001" +
    "\001\000\010\042\u0106\043\u018f\044\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\u0106\043\u0176\044\u0175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\u0106\043\u0155\044\u011e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\030\u010e\031\u010b\042\u0106\043\373\044\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u0112\051\u011c\001\001\000\006\042\u0112\051\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\u0112\050" +
    "\u0117\051\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\u0112\050\u011a\051\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\u0106" +
    "\043\u011f\044\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\u0106\043\u0136\044\u011e\001\001\000\010" +
    "\042\u0106\043\u0135\044\u011e\001\001\000\010\042\u0106\043" +
    "\u0134\044\u011e\001\001\000\010\042\u0106\043\u0133\044\u011e" +
    "\001\001\000\010\042\u0106\043\u0132\044\u011e\001\001\000" +
    "\010\042\u0106\043\u0131\044\u011e\001\001\000\010\042\u0106" +
    "\043\u0130\044\u011e\001\001\000\010\042\u0106\043\u012f\044" +
    "\u011e\001\001\000\010\042\u0106\043\u012d\044\u011e\001\001" +
    "\000\010\042\u0106\043\u012c\044\u011e\001\001\000\010\042" +
    "\u0106\043\u012b\044\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\u0106\043\373\044\u013e\001\001" +
    "\000\010\042\u0106\043\373\044\u013d\001\001\000\010\042" +
    "\u0106\043\373\044\u013c\001\001\000\010\042\u0106\043\373" +
    "\044\u013b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\u0106\043\u0140" +
    "\044\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\u0145\053\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\u0148\053\u0146\001\001\000\002\001\001\000\010\042\u0106" +
    "\043\373\044\u014a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\u0106\043\u014e\044\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\052\u0152\053\u0146\001\001\000\002\001\001" +
    "\000\010\042\u0106\043\u0154\044\u011e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0159\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\u0106\043\u015c\044\u011e\001\001\000\002" +
    "\001\001\000\004\054\u015e\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\u0106\043\u0161\044\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\u0167\053\u0146" +
    "\001\001\000\002\001\001\000\010\042\u0106\043\u0169\044" +
    "\u011e\001\001\000\002\001\001\000\010\042\u0106\043\u016b" +
    "\044\u011e\001\001\000\002\001\001\000\010\042\u0106\043" +
    "\u016d\044\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\u0106\043\u0170\044\u011e\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\u0106\043\u0173\044\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\u0106\043\373\044\u017a\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\u0106\043\u017d\044\u011e" +
    "\001\001\000\002\001\001\000\010\042\u0106\043\u017f\044" +
    "\u011e\001\001\000\002\001\001\000\004\042\u0181\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\u0185\056" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\u0106\043\u0189\044" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\u018c\056\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\u0106\043" +
    "\u0194\044\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\u0199\053" +
    "\u0146\001\001\000\002\001\001\000\010\042\u0106\043\373" +
    "\044\u019b\001\001\000\002\001\001\000\010\024\u019f\025" +
    "\u019e\042\u019d\001\001\000\002\001\001\000\010\024\u01a2" +
    "\025\u019e\042\u019d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\u0106" +
    "\043\u01a4\044\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\u01a8\017\u01a9\001\001" +
    "\000\002\001\001\000\006\013\u01b5\017\u01a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u01af\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u01b3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\u01b9\022\u01bb" +
    "\001\001\000\002\001\001\000\004\014\u01bf\001\001\000" +
    "\006\021\u01bc\022\u01bb\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u01ef\016\u01ee\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u01c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\035\u01cf\036\106" +
    "\037\076\040\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u01d3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u01d7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\035\u01db\036\106\037\076\040\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u01df\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\035\u01e3\036\106\037\076" +
    "\040\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u01e7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\u01f3\016\u01ee\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\u0106\043" +
    "\u01f7\044\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u0205\046\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\u0209\033\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\u020e\046\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	// Just a testing interface (loads formula from file)
	public static void main(String args[]) throws Exception {
	    if (args.length == 0 || args.length > 2) 
			usageAndExit();
	    else if (args.length == 2 && args[1].equalsIgnoreCase("-prefix-output"))
	    	RDDL.USE_PREFIX = true; // Set prefix output
	    else if (args.length == 2) {
	    	System.out.println("Unrecognized option: " + args[1]);
	    	usageAndExit();
	    }
		RDDL rddl = parse(new File(args[0]));
		System.out.println(rddl);
    }

	public static void usageAndExit() {
		System.out.println("Usage: RDDL-filename [-prefix-output]");
	    System.exit(1);	
	}

	// The main runtime method to call
	public static RDDL parse(String s) 
 		throws ParseException {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new StringReader(s));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}

	// The main runtime method to call
	public static RDDL parse(File f) 
 		throws Exception {

            Yylex  lex  = null;
		    Symbol rval = null;
            parser p = null;
	        try {
	           lex = new Yylex(new FileInputStream(f));
	           p = new parser(lex);
		       rval = p.parse();

            } catch (Exception e) {
               int cur_line = (lex != null) ? lex.yyline() + 1 : -1;
               String cur_token = "#" + p.cur_token.sym + ": '" + p.cur_token.value + "'";
               String next_token = "[NOT AVAILABLE]";
               try {
                  Symbol s2 = lex.next_token();
                  next_token = "#" + s2.sym + ": '" + s2.value + "'";
               } catch (Exception e2) { /* discard */ }
	           System.out.println("Error on line " + 
				      ((lex != null) ? ""+ cur_line + ", cur token: " + cur_token + ", next token: " + next_token : "") 
	 			      + "\nException: " + e);
		       //e.printStackTrace();
            }

            return (RDDL)rval.value;		
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPR ::= POISSON LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Poisson(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPR ::= GEOMETRIC LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int probleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int probright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR prob = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Geometric(prob); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPR ::= DISCRETE LPAREN IDENT COMMA ENUM_EXPR_LIST RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int enum_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int enum_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String enum_type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Discrete(enum_type, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPR ::= EXPONENTIAL LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lambdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lambdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR lambda = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Exponential(lambda); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPR ::= NORMAL LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR mu = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR var = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Normal(mu, var); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPR ::= UNIFORM LPAREN EXPR COMMA EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.EXPR l = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR u = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Uniform(l,u); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPR ::= KRON_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR k = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.KronDelta(k); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPR ::= DIRAC_DELTA LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR d = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.DiracDelta(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPR ::= SWITCH LPAREN PVAR_EXPR RPAREN LCURLY CASE_LIST RCURLY 
            {
              RDDL.EXPR RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.SWITCH_EXPR(p, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPR ::= IF LPAREN BOOL_EXPR RPAREN THEN EXPR ELSE EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.IF_EXPR(b, e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPR ::= PROD_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("prod", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPR ::= SUM_OVER UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY EXPR 
            {
              RDDL.EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.AGG_EXPR("sum", list, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPR ::= EXPR MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPR ::= EXPR PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "+"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPR ::= EXPR DIV EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "/"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPR ::= EXPR TIMES EXPR 
            {
              RDDL.EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(e1, e2, "*"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPR ::= MINUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OPER_EXPR(new RDDL.INT_CONST_EXPR(0), e, "-"); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPR ::= PLUS EXPR 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPR ::= LPAREN EXPR RPAREN 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPR ::= LBRACK EXPR RBRACK 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPR ::= DOUBLE 
            {
              RDDL.EXPR RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.REAL_CONST_EXPR(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPR ::= INTEGER 
            {
              RDDL.EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.INT_CONST_EXPR(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPR ::= ENUM_VAL 
            {
              RDDL.EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPR ::= BOOL_EXPR 
            {
              RDDL.EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // BOOL_EXPR ::= BERNOULLI LPAREN EXPR RPAREN 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int probleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int probright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR prob = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.Bernoulli(prob); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // BOOL_EXPR ::= EXISTS UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("exists", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BOOL_EXPR ::= FORALL UNDERSCORE LCURLY TYPED_VAR_LIST RCURLY BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.QUANT_EXPR("forall", list, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BOOL_EXPR ::= BOOL_EXPR EQUIV BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "<=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // BOOL_EXPR ::= BOOL_EXPR IMPLY BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "=>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BOOL_EXPR ::= BOOL_EXPR OR BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "|"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BOOL_EXPR ::= BOOL_EXPR AND BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.BOOL_EXPR b1 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b2 = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CONN_EXPR(b1, b2, "^"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BOOL_EXPR ::= NOT BOOL_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.BOOL_EXPR b = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.NEG_EXPR(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BOOL_EXPR ::= EXPR LESSEQ EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BOOL_EXPR ::= EXPR LESS EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "<"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BOOL_EXPR ::= EXPR GREATEREQ EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BOOL_EXPR ::= EXPR GREATER EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, ">"); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BOOL_EXPR ::= EXPR NEQ EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "~="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BOOL_EXPR ::= EXPR COMP_EQUAL EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e1 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e2 = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.COMP_EXPR(e1, e2, "=="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BOOL_EXPR ::= VAR NEQ TERM 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t2 = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJ_COMP_EXPR(new RDDL.LVAR(t1), t2, "~="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BOOL_EXPR ::= VAR COMP_EQUAL TERM 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t2 = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJ_COMP_EXPR(new RDDL.LVAR(t1), t2, "=="); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BOOL_EXPR ::= LPAREN BOOL_EXPR RPAREN 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.BOOL_EXPR e = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BOOL_EXPR ::= LBRACK BOOL_EXPR RBRACK 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.BOOL_EXPR e = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BOOL_EXPR ::= FALSE 
            {
              RDDL.BOOL_EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BOOL_EXPR ::= TRUE 
            {
              RDDL.BOOL_EXPR RESULT = null;
		 RESULT = new RDDL.BOOL_CONST_EXPR(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BOOL_EXPR ::= PVAR_EXPR 
            {
              RDDL.BOOL_EXPR RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*BOOL_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASE_DEF ::= CASE ENUM_VAL COLON EXPR 
            {
              RDDL.CASE RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.CASE(new RDDL.ENUM_VAL(v),e); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*CASE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASE_LIST ::= CASE_DEF COMMA CASE_LIST 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASE_LIST ::= CASE_DEF 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CASE e = (RDDL.CASE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*CASE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ENUM_EXPR_LIST ::= ENUM_VAL COLON EXPR COMMA ENUM_EXPR_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,e); list.add(0,new RDDL.ENUM_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*ENUM_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ENUM_EXPR_LIST ::= ENUM_VAL COLON EXPR 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.EXPR e = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.ENUM_VAL(i),e})); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*ENUM_EXPR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TYPED_VAR ::= VAR COLON IDENT 
            {
              RDDL.LTYPED_VAR RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LTYPED_VAR(var, type); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*TYPED_VAR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TYPED_VAR_LIST ::= TYPED_VAR COMMA TYPED_VAR_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPED_VAR_LIST ::= TYPED_VAR 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTYPED_VAR t = (RDDL.LTYPED_VAR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*TYPED_VAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TERM_LIST ::= TERM COMMA TERM_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TERM_LIST ::= TERM 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.LTERM t = (RDDL.LTERM)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*TERM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PVAR_EXPR ::= IDENT 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PVAR_EXPR ::= IDENT LPAREN TERM_LIST RPAREN 
            {
              RDDL.PVAR_EXPR RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_EXPR(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*PVAR_EXPR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TERM ::= ENUM_VAL 
            {
              RDDL.LTERM RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TERM ::= PVAR_EXPR 
            {
              RDDL.LTERM RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_EXPR p = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.TVAR_EXPR(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TERM ::= VAR 
            {
              RDDL.LTERM RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.LVAR(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TERM ::= IDENT 
            {
              RDDL.LTERM RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.OBJECT_VAL(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*TERM*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LCONST_LIST ::= ENUM_VAL COMMA LCONST_LIST 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.ENUM_VAL(e)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LCONST_LIST ::= ENUM_VAL 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.ENUM_VAL(e)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LCONST_LIST ::= IDENT COMMA LCONST_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.OBJECT_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LCONST_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.OBJECT_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*LCONST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PVAR_INST_DEF ::= IDENT ASSIGN_EQUAL ANY_TYPE SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN ASSIGN_EQUAL ANY_TYPE SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, val, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PVAR_INST_DEF ::= NOT IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PVAR_INST_DEF ::= NOT IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(false), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PVAR_INST_DEF ::= IDENT SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PVAR_INST_DEF ::= IDENT LPAREN LCONST_LIST RPAREN SEMI 
            {
              RDDL.PVAR_INST_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVAR_INST_DEF(i, new Boolean(true), list); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*PVAR_INST_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PVAR_INST_LIST ::= PVAR_INST_DEF PVAR_INST_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PVAR_INST_LIST ::= PVAR_INST_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVAR_INST_DEF d = (RDDL.PVAR_INST_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*PVAR_INST_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OBJECTS_DEF ::= IDENT COLON LCURLY LCONST_LIST RCURLY SEMI 
            {
              RDDL.OBJECTS_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.OBJECTS_DEF(i, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*OBJECTS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OBJECTS_LIST ::= OBJECTS_DEF OBJECTS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OBJECTS_LIST ::= OBJECTS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.OBJECTS_DEF d = (RDDL.OBJECTS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*OBJECTS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS PVAR_INST_LIST SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,null,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NONFLUENT_BLOCK ::= NON_FLUENTS IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI NON_FLUENTS LCURLY PVAR_INST_LIST RCURLY SEMI RCURLY 
            {
              RDDL.NONFLUENTS RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nonfluents_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nonfluents_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList nonfluents_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.NONFLUENTS(name,domain,objects,nonfluents_list); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*NONFLUENT_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,objects,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-27)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,objects,new ArrayList(),a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-27)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,null,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-28)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,null,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-29)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTANCE_BLOCK ::= INSTANCE IDENT LCURLY DOMAIN ASSIGN_EQUAL IDENT SEMI NON_FLUENTS ASSIGN_EQUAL IDENT SEMI OBJECTS LCURLY OBJECTS_LIST RCURLY SEMI INIT_STATE LCURLY PVAR_INST_LIST RCURLY SEMI MAX_NONDEF_ACTIONS ASSIGN_EQUAL INT_TYPE SEMI HORIZON ASSIGN_EQUAL INTEGER SEMI DISCOUNT ASSIGN_EQUAL DOUBLE SEMI RCURLY 
            {
              RDDL.INSTANCE RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-32)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-32)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-32)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)).right;
		String domain = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-28)).value;
		int nonfluentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int nonfluentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		String nonfluents = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int objectsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left;
		int objectsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).right;
		ArrayList objects = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
		int state_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int state_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		ArrayList state_list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.INSTANCE(name,domain,nonfluents,objects,state_list,a,h,d); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*INSTANCE_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STATE_CONS_DEF ::= BOOL_EXPR SEMI 
            {
              RDDL.STATE_CONS_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.BOOL_EXPR expr = (RDDL.BOOL_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.STATE_CONS_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*STATE_CONS_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATE_CONS_LIST ::= STATE_CONS_DEF STATE_CONS_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATE_CONS_LIST ::= STATE_CONS_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.STATE_CONS_DEF d = (RDDL.STATE_CONS_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*STATE_CONS_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STATE_CONS_SECTION ::= STATE_ACTION_CONSTRAINTS LCURLY STATE_CONS_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*STATE_CONS_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // REW_SECTION ::= REWARD ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.REWARD_DEF RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.REWARD_DEF(expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*REW_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CPF_DEF ::= PVAR_EXPR ASSIGN_EQUAL EXPR SEMI 
            {
              RDDL.CPF_DEF RESULT = null;
		int pexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		RDDL.PVAR_EXPR pexpr = (RDDL.PVAR_EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.EXPR expr = (RDDL.EXPR)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RDDL.CPF_DEF(pexpr, expr); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*CPF_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CPF_LIST ::= CPF_DEF CPF_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CPF_LIST ::= CPF_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.CPF_DEF d = (RDDL.CPF_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*CPF_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CPF_HEADER ::= CDFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CPF_HEADER ::= CPFS 
            {
              String RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ident; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*CPF_HEADER*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CPF_SECTION ::= CPF_HEADER LCURLY CPF_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 list.add(0,new RDDL.CPF_HEADER_NAME(ident)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*CPF_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY ACTION COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL ANY_TYPE RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_ACTION_DEF(varname, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY OBSERVATION COMMA TYPE_SPEC RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_OBS_DEF(varname, range, list); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY INTERMEDIATE COMMA TYPE_SPEC COMMA LEVEL ASSIGN_EQUAL INTEGER RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int levelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer level = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_INTERM_DEF(varname, range, list, level); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY NON_FLUENT COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL ANY_TYPE RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, true, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PVAR_DEF ::= IDENT PARAM_LIST LCURLY STATE COMMA TYPE_SPEC COMMA DEFAULT ASSIGN_EQUAL ANY_TYPE RCURLY SEMI 
            {
              RDDL.PVARIABLE_DEF RESULT = null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int defvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int defvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defvalue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.PVARIABLE_STATE_DEF(varname, false, range, list, defvalue); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*PVAR_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PVAR_LIST ::= PVAR_DEF PVAR_LIST 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,d); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PVAR_LIST ::= PVAR_DEF 
            {
              ArrayList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.PVARIABLE_DEF d = (RDDL.PVARIABLE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {d})); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*PVAR_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PVAR_SECTION ::= PVARIABLES LCURLY PVAR_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*PVAR_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TYPE_SPEC ::= BOOL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TYPE_SPEC ::= REAL 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TYPE_SPEC ::= INT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TYPE_SPEC ::= IDENT 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*TYPE_SPEC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAM_LIST2 ::= TYPE_SPEC COMMA PARAM_LIST2 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAM_LIST2 ::= TYPE_SPEC 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {t})); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*PARAM_LIST2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAM_LIST ::= LPAREN PARAM_LIST2 RPAREN COLON 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAM_LIST ::= COLON 
            {
              ArrayList RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*PARAM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INT_TYPE ::= NEG_INF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Integer.MIN_VALUE); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INT_TYPE ::= POS_INF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Integer.MAX_VALUE); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INT_TYPE ::= MINUS INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(-i.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INT_TYPE ::= INTEGER 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*INT_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DOUBLE_TYPE ::= NEG_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.NEGATIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DOUBLE_TYPE ::= POS_INF 
            {
              Double RESULT = null;
		 RESULT = new Double(Double.POSITIVE_INFINITY); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DOUBLE_TYPE ::= MINUS DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(-d.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DOUBLE_TYPE ::= DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*DOUBLE_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOOL_TYPE ::= FALSE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOOL_TYPE ::= TRUE 
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*BOOL_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ANY_TYPE ::= ENUM_VAL 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RDDL.ENUM_VAL(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ANY_TYPE ::= IDENT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ANY_TYPE ::= INT_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ANY_TYPE ::= DOUBLE_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ANY_TYPE ::= BOOL_TYPE 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ANY_TYPE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENUM_LIST ::= ENUM_VAL COMMA ENUM_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,new RDDL.ENUM_VAL(i)); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENUM_LIST ::= ENUM_VAL 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {new RDDL.ENUM_VAL(i)})); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ENUM_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STRING_LIST ::= IDENT COMMA STRING_LIST 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,i); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STRING_LIST ::= IDENT 
            {
              ArrayList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {i})); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*STRING_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TYPE_DEF ::= IDENT COLON LCURLY ENUM_LIST RCURLY SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.ENUM_TYPE_DEF(i,el); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE_DEF ::= IDENT COLON OBJECT SEMI 
            {
              RDDL.TYPE_DEF RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new RDDL.OBJECT_TYPE_DEF(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*TYPE_DEF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE_LIST ::= TYPE_DEF TYPE_LIST 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,def); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE_LIST ::= TYPE_DEF 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.TYPE_DEF def = (RDDL.TYPE_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {def})); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*TYPE_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE_SECTION ::= TYPES LCURLY TYPE_LIST RCURLY SEMI 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*TYPE_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DOMAIN_LIST ::= STATE_CONS_SECTION 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DOMAIN_LIST ::= REW_SECTION 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayList(Arrays.asList(new Object[] {r})); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DOMAIN_LIST ::= CPF_SECTION 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DOMAIN_LIST ::= PVAR_SECTION 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DOMAIN_LIST ::= TYPE_SECTION 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DOMAIN_LIST ::= STATE_CONS_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList s = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(s); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DOMAIN_LIST ::= REW_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.REWARD_DEF r = (RDDL.REWARD_DEF)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.add(0,r);    RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DOMAIN_LIST ::= CPF_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(c); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DOMAIN_LIST ::= PVAR_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(p); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DOMAIN_LIST ::= TYPE_SECTION DOMAIN_LIST 
            {
              ArrayList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList t = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 list.addAll(t); RESULT = list; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*DOMAIN_LIST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		 RESULT = new RDDL.DOMAIN(new ArrayList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // REQ_SECTION ::= REQUIREMENTS ASSIGN_EQUAL LCURLY STRING_LIST RCURLY SEMI 
            {
              RDDL.DOMAIN RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RDDL.DOMAIN(list); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*REQ_SECTION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DOMAIN_BLOCK ::= DOMAIN IDENT LCURLY REQ_SECTION DOMAIN_LIST RCURLY 
            {
              RDDL.DOMAIN RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int domainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int domainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RDDL.DOMAIN domain = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 domain.setName(name); domain.addDefs(list); RESULT = domain; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*DOMAIN_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RDDL_BLOCK ::= NONFLUENT_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RDDL_BLOCK ::= INSTANCE_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RDDL_BLOCK ::= DOMAIN_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RDDL rddl = new RDDL(); rddl.addDomain(d); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RDDL_BLOCK ::= NONFLUENT_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.NONFLUENTS n = (RDDL.NONFLUENTS)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addNonFluents(n); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RDDL_BLOCK ::= INSTANCE_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.INSTANCE i = (RDDL.INSTANCE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addInstance(i); RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RDDL_BLOCK ::= DOMAIN_BLOCK RDDL_BLOCK 
            {
              RDDL RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL.DOMAIN d = (RDDL.DOMAIN)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rddlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rddlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RDDL rddl = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 rddl.addDomain(d);   RESULT = rddl; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*RDDL_BLOCK*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= RDDL_BLOCK EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RDDL start_val = (RDDL)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

